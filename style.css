:root,html{box-sizing:border-box}pre,textarea{overflow:auto}*,body{margin:0}#off-canvas ul,nav .big-menu ul{list-style-type:none}#single #comments::after,#single #post::after,#single header #info-wrap::after,nav #mobile-menu::after,nav .big-menu::after{clear:both;content:""}*,::after,::before{box-sizing:inherit;color:inherit;font-family:inherit;font-size:inherit;line-height:inherit;text-decoration:inherit;vertical-align:inherit;border-style:solid;border-width:0}/*! sanitize.css | CC0 Public Domain | github.com/jonathantneal/sanitize.css */:root{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%;cursor:default;font-family:"Arvo",sans-serif;line-height:1.5em;text-rendering:optimizeLegibility;vertical-align:top}body h1,body h2,body h3{line-height:1em}[hidden],audio:not([controls]),template{display:none}details,main,summary{display:block}input[type=number]{width:auto}input[type=search]{-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}progress{display:inline-block}small{font-size:75%}textarea{resize:vertical}[unselectable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}*{padding:0;cursor:inherit}a,button,input,select,textarea{cursor:initial}button,input,select,textarea{background:0 0}code,kbd,pre,samp{font-family:monospace,monospace}input{min-height:1.5em}nav ol,nav ul{list-style:none}select{-moz-appearance:none;-webkit-appearance:none}select::-ms-expand{display:none}select::-ms-value{color:currentColor}table{border-collapse:collapse;border-spacing:0}::-moz-selection{background-color:#B3D4FC;text-shadow:none}::selection{background-color:#B3D4FC;text-shadow:none}@media screen{[hidden~=screen]{display:inherit}[hidden~=screen]:not(:active):not(:focus):not(:target){clip:rect(0 0 0 0)!important;position:absolute!important}}body{background-color:#DCDCDD}#off-canvas,nav{background:#46494C}@media screen and (max-width:767px){body{padding:0 10px}}body h1{font-size:2rem}body h2{font-size:1.5rem}body h3{font-size:1rem}body h4{font-size:.9rem}body h6{font-size:.75rem}body p{margin:20px 0}body #offcanvas,body h1,body h2,body h3,body h4,body h5,body h6,body nav{font-family:'Josefin Sans',sans-serif}nav{position:fixed;top:0;right:0;left:0;z-index:9;color:#C5C3C6;padding:0 5px}nav .big-menu{max-width:68em;margin-left:auto;margin-right:auto}nav .big-menu::after{display:table}@media screen and (max-width:479px){nav .big-menu{display:none}}nav .big-menu ul{float:left;display:block;width:74.41059%;margin:0}nav .big-menu ul:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){nav .big-menu ul{float:left;display:block;margin-right:3.57866%;width:61.158%}nav .big-menu ul:last-child{margin-right:0}}nav .big-menu ul li{display:inline-block;padding:10px}nav .big-menu ul li .sub-menu{position:absolute;display:none;top:32px;z-index:10;width:75px}nav .big-menu ul li .sub-menu li{background:#46494C;width:100%;margin:0 0 0 -1px;padding:0 2px}nav .big-menu .brand{float:left;display:block;margin-right:2.35765%;width:23.23176%;text-align:right;padding-top:2px}nav .big-menu .brand:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){nav .big-menu .brand{float:left;display:block;margin-right:3.57866%;width:35.26334%}nav .big-menu .brand:last-child{margin-right:0}}nav #mobile-menu{max-width:68em;margin-left:auto;margin-right:auto;display:none;padding:0 10px}nav #mobile-menu::after{display:table}@media screen and (max-width:479px){nav #mobile-menu{display:block}}nav #mobile-menu #burger{float:left;margin-top:6px}nav #mobile-menu #brand{float:right;text-align:right}#off-canvas{position:fixed;top:47px;bottom:0;left:-51vw;z-index:10;color:#C5C3C6;width:50vw;padding-left:15px}#index{margin-top:46px}#index .iddqd{background-image:url(../ashes/public/img/iddqd.jpg)!important}#index #left-half{position:fixed;top:0;right:0;bottom:0;left:0;width:50%;background-image:url(../ashes/public/img/me.jpg);background-position:left center;background-size:cover}#index #left-half #social{position:absolute;top:50px;right:0;bottom:0;left:0;color:#46494C;width:33%}#index #left-half #social .name{display:none;font-size:1.5em;vertical-align:middle;line-height:2em;margin-left:-25vw;-webkit-transition:margin-left .5s ease;transition:margin-left .5s ease}#index #right-half{width:50%;min-height:100vh;float:right;padding:5px;position:relative;color:#46494C;box-shadow:-1px 0 5px 0 rgba(0,0,0,.75)}@media screen and (max-width:767px){#index #left-half{display:none}#index #right-half{width:100%;float:none;box-shadow:none}}#index #right-half article{margin:50px 0}#index #right-half article .cat{font-size:.75rem;line-height:.75rem}#index #right-half article .content p{margin-top:0}#index #right-half article .content h2{padding-bottom:5px;color:#000}#index #right-half article #page a{color:#1985A1;-webkit-transition:all .25s ease;transition:all .25s ease}#index #right-half article #page a:hover,#single .hover{background-color:#46494C;color:#C5C3C6!important;padding:2px}.hidden-stuff{display:none}#single .superscript{font-size:smaller;vertical-align:super;line-height:.5em;padding:0 0 0 1px}#single header{position:relative;height:75vh;z-index:8;background-size:cover;background-position:center}#single header #info-wrap{padding:100px 0 0;text-align:center;max-width:68em;margin-left:auto;margin-right:auto}#single #post::after,#single header #info-wrap::after{display:table}#single header #info-wrap h1,#single header #info-wrap h5{margin:10px 0}#single header #info-wrap h5 p{margin:0}#single #comments,#single #post{max-width:68em;margin-left:auto}#single header #info-wrap #scroll-click{margin-top:10px}#single header #info-wrap #scroll-click #arrow{font-size:30px}#single header #info-wrap #scroll-click #arrow a{color:#1985A1;text-decoration:none}#single #post{margin-right:auto}#single #post a{-webkit-transition:all .25s ease;transition:all .25s ease;color:#1985A1}#single #post article{float:left;display:block;margin-right:2.35765%;width:100%}#single #post article:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){#single #post article{float:left;display:block;margin-right:3.57866%;width:100%}#single #post article:last-child{margin-right:0}}@media screen and (max-width:479px){#single #post article{float:left;display:block;margin-right:7.42297%;width:100%}#single #post article:last-child{margin-right:0}}#single #post article .single .post-title{margin-top:0}#single #post article .single .post-content p{line-height:1.5rem}#single #post article .single .post-content code{background:#f8f8ff;padding:.25rem}#single #post article .single .post-content a{text-decoration:underline}#single #post article .single .post-content a:hover{background-color:#46494C;color:#C5C3C6;padding:2px}#single #comments{margin-right:auto;margin-top:20px}#single #comments::after{display:table}#single #comments #tag h2{display:inline;vertical-align:bottom}#single #comments #disqus_thread{float:left;display:block;margin-right:2.35765%;width:100%}#single #comments #disqus_thread:last-child{margin-right:0}
/*# sourceMappingURL=data:application/json;base64, */