:root,html{box-sizing:border-box}pre,textarea{overflow:auto}*,body{margin:0}#single #comments::after,#single #post::after,#single header #info-wrap::after,nav .menu::after{clear:both;content:""}*,::after,::before{box-sizing:inherit;color:inherit;font-family:inherit;font-size:inherit;line-height:inherit;text-decoration:inherit;vertical-align:inherit;border-style:solid;border-width:0}/*! sanitize.css | CC0 Public Domain | github.com/jonathantneal/sanitize.css */:root{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%;cursor:default;font-family:"Raleway",sans-serif;line-height:1.5em;text-rendering:optimizeLegibility;vertical-align:top}body h1,body h2,body h3{line-height:1em}[hidden],audio:not([controls]),template{display:none}details,main,summary{display:block}input[type=number]{width:auto}input[type=search]{-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}progress{display:inline-block}small{font-size:75%}textarea{resize:vertical}[unselectable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}*{padding:0;cursor:inherit}a,button,input,select,textarea{cursor:initial}button,input,select,textarea{background:0 0}code,kbd,pre,samp{font-family:monospace,monospace}input{min-height:1.5em}nav ol,nav ul{list-style:none}select{-moz-appearance:none;-webkit-appearance:none}select::-ms-expand{display:none}select::-ms-value{color:currentColor}table{border-collapse:collapse;border-spacing:0}::-moz-selection{background-color:#B3D4FC;text-shadow:none}::selection{background-color:#B3D4FC;text-shadow:none}@media screen{[hidden~=screen]{display:inherit}[hidden~=screen]:not(:active):not(:focus):not(:target){clip:rect(0 0 0 0)!important;position:absolute!important}}@media screen and (max-width:767px){body{padding:0 10px}}body h1{font-size:2rem}body h2{font-size:1.5rem}body h3{font-size:1rem}body h4{font-size:.9rem}body h6{font-size:.75rem}body p{margin:20px 0}body h1,body h2,body h3,body h4,body h5,body h6{font-family:'Droid Sans',sans-serif}nav{position:fixed;top:0;right:0;left:0;z-index:9;background:#000;color:#fff;padding:0 5px}nav .menu{max-width:68em;margin-left:auto;margin-right:auto}nav .menu::after{display:table}@media screen and (max-width:479px){nav .menu{display:none}}nav .menu ul{float:left;display:block;width:74.41059%;margin:0;list-style-type:none}nav .menu ul:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){nav .menu ul{float:left;display:block;margin-right:3.57866%;width:61.158%}nav .menu ul:last-child{margin-right:0}}nav .menu ul li{display:inline-block;padding:10px}nav .menu ul li .sub-menu{position:absolute;display:none;top:32px;z-index:10;width:75px}nav .menu ul li .sub-menu li{background:#000;width:100%;margin:0 0 0 -1px;padding:0 2px}nav .menu .brand{float:left;display:block;margin-right:2.35765%;width:23.23176%;text-align:right}nav .menu .brand:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){nav .menu .brand{float:left;display:block;margin-right:3.57866%;width:35.26334%}nav .menu .brand:last-child{margin-right:0}}#index{margin-top:46px}#index #left-half{position:fixed;top:0;right:0;bottom:0;left:0;width:50%;background:url(../ashes/public/img/me.jpg) left center;background-size:cover}#index #left-half #social{position:absolute;top:50px;right:0;bottom:0;left:0}#index #right-half{width:50%;min-height:100vh;float:right;padding:5px;position:relative;box-shadow:-1px 0 5px 0 rgba(0,0,0,.75)}@media screen and (max-width:767px){#index #left-half{display:none}#index #right-half{width:100%;float:none;box-shadow:none}}#index #right-half article{margin:0 0 40px}#index #right-half article .cat{font-size:.75rem;line-height:.75rem}#index #right-half article .content p{margin-top:0}#index #right-half article .content h2{padding-bottom:5px}#single .hover{background-color:#000;color:#fff}#single .superscript{font-size:smaller;vertical-align:super;line-height:.5em;padding:0 0 0 1px}#single header{position:relative;height:75vh;z-index:8;background-size:cover;background-position:center}#single header #info-wrap{padding:100px 0 0;text-align:center;max-width:68em;margin-left:auto;margin-right:auto}#single #post::after,#single header #info-wrap::after{display:table}#single header #info-wrap h1,#single header #info-wrap h5{margin:10px 0}#single header #info-wrap h5 p{margin:0}#single #comments,#single #post{max-width:68em;margin-left:auto}#single header #info-wrap #scroll-click{margin-top:10px}#single header #info-wrap #scroll-click #arrow{font-size:30px}#single header #info-wrap #scroll-click #arrow a{color:#000;text-decoration:none}#single #post{margin-right:auto}#single #post a{-webkit-transition:all .5s ease;transition:all .5s ease}#single #post article{float:left;display:block;margin-right:2.35765%;width:74.41059%}#single #post article:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){#single #post article{float:left;display:block;margin-right:3.57866%;width:61.158%}#single #post article:last-child{margin-right:0}}@media screen and (max-width:479px){#single #post article{float:left;display:block;margin-right:7.42297%;width:100%}#single #post article:last-child{margin-right:0}}#single #post article .single .post-title{margin-top:0}#single #post article .single .post-content p{line-height:1.5rem}#single #post article .single .post-content code{background:#f0f0f0;padding:.25em}#single #post article .single .post-content a{text-decoration:underline;font-weight:700}#single #post aside{float:left;display:block;margin-right:2.35765%;width:23.23176%}#single #post aside:last-child{margin-right:0}@media screen and (min-width:480px) and (max-width:767px){#single #post aside{float:left;display:block;margin-right:3.57866%;width:35.26334%}#single #post aside:last-child{margin-right:0}}@media screen and (max-width:479px){#single #post aside{float:left;display:block;margin-right:7.42297%;width:100%}#single #post aside:last-child{margin-right:0}}#single #post aside .sidebar-wrap{font-size:.75em;overflow-x:hidden;text-overflow:ellipsis;-webkit-transition:all .33s ease;transition:all .33s ease}#single #post aside .sidebar-wrap i{font-size:1rem;vertical-align:text-top;margin-right:2px}#single #post aside .sidebar-wrap a{text-decoration:underline}#single #comments{margin-right:auto}#single #comments::after{display:table}#single #comments #disqus_thread{float:left;display:block;margin-right:2.35765%;width:100%}#single #comments #disqus_thread:last-child{margin-right:0}
/*# sourceMappingURL=data:application/json;base64, */